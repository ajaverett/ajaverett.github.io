---
title: "Dash through the cosmos"
subtitle: "A framework with just the right amount of abstraction"
title-block-banner: ../../images/banner.png
title-block-banner-color: 'white'
image: "cosmos.webp"
categories: ["Dash", "Plotly", "Python", "Visualization","Space"]
format:
  html:
    code-fold: show
    code-summary: "Show the code"
---

Check out the web app I made with Dash [here](https://ajaverett.pythonanywhere.com/)!

```{=html}

<style>
    /* Default style for mobile devices */
    .responsive-iframe {
        width: 100%;
        height: 700px;
        border: 2px solid black;
    }

    /* Style for devices with a width of 800px or more (typically web) */
    @media (min-width: 800px) {
        .responsive-iframe {
            width: 800px;
            height: 700px;
            border: 2px solid black;
        }
    }
</style>

<iframe class="responsive-iframe" src="https://ajaverett.pythonanywhere.com/" title="Quarto Documentation"></iframe>


```

Are you a data scientist who wants to share your work with the world? Have you tried Streamlit, but found it too slow and limiting? Have you tried actually learning to code and realizing you're a data scientist for a reason? Do you want to build a web app that looks as sexy as the one I made?

One answer, Dash! 

### Dash

Dash is a game-changer in interactive data visualization that combines the analytical power of Python with the interactivity of other web apps, turning complex data into captivating, real-time narratives. Whether it's dynamic graphs or responsive data tables.

### Plotly

Dash is built on top of Plotly and Flask- two relatively simple applications. Plotly is natively interactive and Flask is a web framework for Python. This means that Dash is a Python framework for building web applications with native support for interactive data visualization in Plotly. How cool is that?

In order for us to get started, we need to install Dash and Plotly. We can do this by running the following commands in our terminal:

```{bash}
pip install dash plotly
```

### Data

After we've installed Dash and Plotly, we need to get some data to visualize.

I scraped and cleaned the data for this tutorial from [Wikipedia](https://en.wikipedia.org/wiki/List_of_natural_satellites). The data includes information about the moons of our solar system, including their discovery year, orbital period, and radius.



This tutorial will guide you through building a Dash app that visualizes information about the moons of our solar system. Dash, built on top of Plotly and Flask, is a powerful tool for creating interactive, web-based data visualizations.




```{python}
#| code-fold: true
#| 
import pandas as pd
import numpy as np
import plotly.express as px
import janitor
pattern = r"(\d{1,3}(?:,\d{3})*(?:\.\d+)?)"

df = pd\
    .read_html("https://en.wikipedia.org/wiki/List_of_natural_satellites")[-2]\
    .drop(columns=["Image"])\
    .clean_names()\
    .assign(discovery_year=lambda x: pd.to_numeric(x['discovery_year'], errors='coerce'),
            year_announced=lambda x: pd.to_numeric(x['year_announced'], errors='coerce'),
            numeral=lambda x: pd.to_numeric(x['numeral'].str.extract('(\\d+)', expand=False), errors='coerce'),
            mean_radius_km=lambda x: pd.to_numeric(x['mean_radius_km_'].str.extract(pattern, expand=False).str.replace(',', ''), errors='coerce'),
            orbital_semi_km=lambda x: pd.to_numeric(x['orbital_semi_major_axis_km_'].str.extract(pattern, expand=False).str.replace(',', ''), errors='coerce'),
            sidereal_period=lambda x: pd.to_numeric(x['sidereal_period_d_r_=_retrograde_'].str.extract(pattern, expand=False).str.replace(',', ''), errors='coerce'))\
    .drop(columns=['mean_radius_km_', 
                   'orbital_semi_major_axis_km_', 
                   'sidereal_period_d_r_=_retrograde_',
                   'ref_s_'])

                

```


# Part 1: Plotly Express Graphs

The first thing we'll do is create a few graphs using Plotly Express. Since Dash is built on top of Plotly, we can use Plotly Express to create graphs that we can then embed in our Dash app.

```{python}
#| code-fold: true

fig = px\
    .area(
        x=df['discovery_year'].value_counts().sort_index().index, 
        y=df['discovery_year'].value_counts().sort_index().cumsum().values, 
        template="simple_white",
        color_discrete_sequence=['#197ad9'],
        # log_y=True,
        labels={'x': 'Year of Discovery', 'y': 'Number of Moons Discovered'},
        title='Number of Moons Discovered Over Time')\
    .update_xaxes(range=[1610, 2023])

fig
```


# Part 2: Dash App Layouts

Now that we've created a few graphs, we can start building our Dash app. 


```{python}
#| eval: false
#| code_fold: show

app = dash.Dash(__name__) # this creates the app

app.layout = html.Div([

    html.H1("Moons Title", 
            style={'text-align': 'center'}), # this creates the title


    html.P("Moons Paragraph", 
           style={'text-align': 'center'}), # this creates the paragraph


    dcc.Graph(figure=fig) # this creates the graph

  ], style="backgroundColor': 'white'") # this creates the layout



if __name__ == '__main__':
    app.run_server(debug=True)

```

Notice the `app.layout = html.Div()` line. This is where we'll put all of our HTML code. There are two parts of any HTML code block:

 - The children! These are the elements under the parent element. For example, the children of the `html.Div()` element are the 
 
    - `html.H1()`, 
    
    - `html.P()`, and

    - `dcc.Graph()` elements.

 - The style! This is the CSS code that styles the HTML elements. For example, I just did `style={'text-align': 'center'}` to center the text in the `html.H1()` and `html.P()` elements. The CSS that covers the entire app is `style="backgroundColor': 'white'"` since it is put on the outermost `html.Div()` element.

 